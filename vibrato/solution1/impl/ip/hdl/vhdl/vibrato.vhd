-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vibrato is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_V_TVALID : IN STD_LOGIC;
    in_V_TREADY : OUT STD_LOGIC;
    out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_TVALID : OUT STD_LOGIC;
    out_V_TREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of vibrato is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "vibrato,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.625000,HLS_SYN_LAT=119,HLS_SYN_TPT=none,HLS_SYN_MEM=72,HLS_SYN_DSP=105,HLS_SYN_FF=14138,HLS_SYN_LUT=13477}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (96 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (96 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (96 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (96 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (96 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (96 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (96 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (96 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (96 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (96 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_46BB8000 : STD_LOGIC_VECTOR (31 downto 0) := "01000110101110111000000000000000";
    constant ap_const_lv64_3FC999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111111001001100110011001100110011001100110011001100110011010";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv64_3FD47AE147AE147B : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010100011110101110000101000111101011100001010001111011";
    constant ap_const_lv64_40E7700000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000011100111011100000000000000000000000000000000000000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv64_3F49BC65C0000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111101001001101111000110010111000000000000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_44D : STD_LOGIC_VECTOR (10 downto 0) := "10001001101";
    constant ap_const_lv11_4A : STD_LOGIC_VECTOR (10 downto 0) := "00001001010";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv124_0 : STD_LOGIC_VECTOR (123 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv11_403 : STD_LOGIC_VECTOR (10 downto 0) := "10000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv63_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (62 downto 0) := "111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv52_FFFFFFFFFFFFF : STD_LOGIC_VECTOR (51 downto 0) := "1111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_5DC0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101110111000000";
    constant ap_const_lv32_FFFFA240 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111010001001000000";
    constant ap_const_lv32_5DBF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000101110110111111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal in_V_0_vld_in : STD_LOGIC;
    signal in_V_0_vld_out : STD_LOGIC;
    signal in_V_0_ack_in : STD_LOGIC;
    signal in_V_0_ack_out : STD_LOGIC;
    signal in_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal in_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal in_V_0_sel_rd : STD_LOGIC := '0';
    signal in_V_0_sel_wr : STD_LOGIC := '0';
    signal in_V_0_sel : STD_LOGIC;
    signal in_V_0_load_A : STD_LOGIC;
    signal in_V_0_load_B : STD_LOGIC;
    signal in_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_V_0_state_cmp_full : STD_LOGIC;
    signal out_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_1_vld_in : STD_LOGIC;
    signal out_V_1_vld_out : STD_LOGIC;
    signal out_V_1_ack_in : STD_LOGIC;
    signal out_V_1_ack_out : STD_LOGIC;
    signal out_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal out_V_1_sel_rd : STD_LOGIC := '0';
    signal out_V_1_sel_wr : STD_LOGIC := '0';
    signal out_V_1_sel : STD_LOGIC;
    signal out_V_1_load_A : STD_LOGIC;
    signal out_V_1_load_B : STD_LOGIC;
    signal out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_V_1_state_cmp_full : STD_LOGIC;
    signal delay : STD_LOGIC_VECTOR (31 downto 0);
    signal depth : STD_LOGIC_VECTOR (31 downto 0);
    signal Initialized : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal phaseStep : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal hls_ref_4oPi_table_s_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal hls_ref_4oPi_table_s_ce0 : STD_LOGIC;
    signal hls_ref_4oPi_table_s_q0 : STD_LOGIC_VECTOR (255 downto 0);
    signal hls_hotbm_fourth_o_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_4_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_4_q0 : STD_LOGIC_VECTOR (58 downto 0);
    signal hls_hotbm_fourth_o_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_5_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_5_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal hls_hotbm_fourth_o_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_6_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_6_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal hls_hotbm_fourth_o_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_7_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_7_q0 : STD_LOGIC_VECTOR (32 downto 0);
    signal hls_hotbm_fourth_o_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal hls_hotbm_fourth_o_ce0 : STD_LOGIC;
    signal hls_hotbm_fourth_o_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal writePos : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal buffer_r_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal buffer_r_ce0 : STD_LOGIC;
    signal buffer_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal buffer_r_address1 : STD_LOGIC_VECTOR (14 downto 0);
    signal buffer_r_ce1 : STD_LOGIC;
    signal buffer_r_we1 : STD_LOGIC;
    signal buffer_r_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal grp_fu_423_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_435 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_fu_412_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal grp_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_447 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal grp_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_453 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal grp_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_459 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_429_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_464 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal grp_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal delay_read_reg_1877 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Initialized_load_reg_1882 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_assign_fu_498_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_1887 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_63_reg_1893 : STD_LOGIC_VECTOR (31 downto 0);
    signal results_sign_V_1_reg_1898 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal loc_V_fu_516_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_reg_1904 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_1_fu_526_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_1_reg_1911 : STD_LOGIC_VECTOR (51 downto 0);
    signal closepath_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal closepath_reg_1917 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_565_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_reg_1928 : STD_LOGIC_VECTOR (6 downto 0);
    signal ret_V_reg_1933 : STD_LOGIC_VECTOR (169 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_43_i_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_i_reg_1948 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_7_reg_1954 : STD_LOGIC_VECTOR (123 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_47_i_i_reg_1960 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_65_fu_639_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_65_reg_1965 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal p_Val2_8_fu_654_p3 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_8_reg_1971 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Result_i3_i_i_reg_1976 : STD_LOGIC_VECTOR (60 downto 0);
    signal tmp_i_i_fu_671_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_reg_1981 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal Mx_zeros_V_fu_709_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal Mx_zeros_V_reg_1986 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_i_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_i_reg_1992 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_i_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_44_i_reg_1998 : STD_LOGIC_VECTOR (0 downto 0);
    signal Mx_V_reg_2004 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal Ex_V_fu_750_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal Ex_V_reg_2011 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_760_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_reg_2016 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_6_fu_774_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_6_reg_2021 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_i_i_reg_2026 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal p_Val2_28_fu_816_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal p_Val2_28_reg_2031 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_i1_i_reg_2036 : STD_LOGIC_VECTOR (48 downto 0);
    signal cos_basis_fu_830_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal cos_basis_reg_2041 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal OP1_V_fu_851_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal OP1_V_reg_2048 : STD_LOGIC_VECTOR (97 downto 0);
    signal tmp_64_i_i_fu_873_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_i_i_reg_2055 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_i_i_reg_2072 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal hls_hotbm_fourth_o_9_reg_2078 : STD_LOGIC_VECTOR (51 downto 0);
    signal hls_hotbm_fourth_o_11_reg_2083 : STD_LOGIC_VECTOR (43 downto 0);
    signal OP2_V_fu_889_p1 : STD_LOGIC_VECTOR (97 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_60_i_i_reg_2130 : STD_LOGIC_VECTOR (41 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_62_i_i_reg_2135 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_38_reg_2140 : STD_LOGIC_VECTOR (58 downto 0);
    signal tmp_35_i_i_reg_2145 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_37_i_i_reg_2150 : STD_LOGIC_VECTOR (47 downto 0);
    signal hls_hotbm_fourth_o_13_reg_2155 : STD_LOGIC_VECTOR (32 downto 0);
    signal hls_hotbm_fourth_o_15_reg_2160 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal p_Val2_43_fu_1014_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_43_reg_2185 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_reg_2190 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal tmp_21_reg_2195 : STD_LOGIC_VECTOR (28 downto 0);
    signal Mx_V_read_assign_fu_1040_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal Mx_V_read_assign_reg_2200 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal r_V_fu_1057_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_reg_2205 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal result_V_reg_2220 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal r_V_1_fu_1096_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_1_reg_2225 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_scaled_fixed2ieee_fu_391_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal resultf_reg_2230 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_scaled_fixed2ieee_fu_391_ap_done : STD_LOGIC;
    signal p_Result_s_fu_1238_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_2235 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ret_V_6_fu_1268_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_6_reg_2240 : STD_LOGIC_VECTOR (10 downto 0);
    signal ret_V_7_fu_1284_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal ret_V_7_reg_2245 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal tmp_33_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_2258 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal storemerge6_fu_1350_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge6_reg_2263 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_42_reg_2268 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal loc_V_5_fu_1380_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_5_reg_2273 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_1_fu_1394_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_1_reg_2278 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_1_fu_1412_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_reg_2283 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_86_i_i_i_fu_1484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_i_i_i_reg_2289 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal tmp_89_i_i_i_fu_1488_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_i_i_i_reg_2294 : STD_LOGIC_VECTOR (31 downto 0);
    signal readPos_load_fu_1531_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal readPos_load_reg_2299 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal tmp_14_fu_1539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_2306 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_55_fu_1558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_55_reg_2321 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_7_fu_1572_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_7_reg_2326 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_2_fu_1586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_2_reg_2331 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_3_fu_1604_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_3_reg_2336 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_60_fu_1612_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_60_reg_2342 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_9_fu_1626_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_9_reg_2347 : STD_LOGIC_VECTOR (22 downto 0);
    signal isNeg_3_fu_1640_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal isNeg_3_reg_2352 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_assign_5_fu_1658_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_5_reg_2357 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Val2_57_fu_1751_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_57_reg_2363 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal p_Val2_62_fu_1815_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_62_reg_2368 : STD_LOGIC_VECTOR (30 downto 0);
    signal storemerge_fu_1870_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal storemerge_reg_2373 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_scaled_fixed2ieee_fu_391_ap_start : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_391_ap_idle : STD_LOGIC;
    signal grp_scaled_fixed2ieee_fu_391_ap_ready : STD_LOGIC;
    signal ap_reg_grp_scaled_fixed2ieee_fu_391_ap_start : STD_LOGIC := '0';
    signal tmp_i2_i_i_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_1549_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_fu_1554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_fu_1666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal storemerge5_fu_1680_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_397_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal grp_fu_403_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal grp_fu_409_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal grp_fu_412_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_i_i_i_fu_1299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_415_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_423_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_429_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_429_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal p_Val2_3_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal expv_op_i_fu_536_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal addr_V_fu_542_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_i_i_i_fu_550_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_34_i_i_i_fu_569_p1 : STD_LOGIC_VECTOR (255 downto 0);
    signal r_V_4_fu_572_p2 : STD_LOGIC_VECTOR (255 downto 0);
    signal p_Result_34_fu_588_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_602_p0 : STD_LOGIC_VECTOR (52 downto 0);
    signal grp_fu_602_p1 : STD_LOGIC_VECTOR (169 downto 0);
    signal grp_fu_602_p2 : STD_LOGIC_VECTOR (222 downto 0);
    signal tmp_34_fu_645_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_i_i_fu_649_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Result_35_fu_676_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_36_fu_683_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_Result_37_fu_693_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i4_i_i_fu_701_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_i_i_fu_729_p1 : STD_LOGIC_VECTOR (123 downto 0);
    signal p_Val2_26_fu_732_p2 : STD_LOGIC_VECTOR (123 downto 0);
    signal storemerge_i_i_fu_723_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_51_i_i_fu_747_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sh_i_cast_fu_756_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_53_i_i_fu_768_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_6_i_cast_fu_782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_i_i_fu_785_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_55_i_i_fu_789_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_56_i_i_fu_794_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Val2_s_fu_799_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_854_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_854_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal sin_basis_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_38_fu_866_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_854_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_892_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_892_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_897_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_897_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_909_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_921_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal grp_fu_892_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_897_p2 : STD_LOGIC_VECTOR (97 downto 0);
    signal grp_fu_909_p2 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_921_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_980_p0 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_980_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal grp_fu_992_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_992_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal p_Val2_40_fu_967_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_67_i_i_fu_1002_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_i_i_fu_998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_69_i_i_cast_fu_1011_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_42_fu_1005_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_980_p2 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_992_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal tmp_71_i_i_cast_fu_1046_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_i_i_cast_fu_1054_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_44_fu_1049_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1069_p0 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_1069_p2 : STD_LOGIC_VECTOR (125 downto 0);
    signal p_Ex_V_ret_i_fu_1075_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal rhs_V_1_fu_1092_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_46_fu_1103_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_40_fu_1128_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_28_fu_1134_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_1172_p18 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_i_fu_1210_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_39_fu_1106_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_fu_1217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_i_fu_1227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_i_fu_1223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_i_40_fu_1232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_i_demorg_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_i_fu_1249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_fu_1263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_i_cast_fu_1255_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal loc_V_2_fu_1114_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_Result_2_i_cast_fu_1276_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal loc_V_3_fu_1124_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_41_fu_1292_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_to_int_fu_1309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_1313_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_49_fu_1323_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_1333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_1327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_1339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_1345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_50_fu_1358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_4_fu_1370_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i_cast6_fu_1384_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_1388_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_81_i_i_i_fu_1402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_i_i_i_cast_fu_1408_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_80_i_i_i_fu_1420_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_1_cast_fu_1433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cas_fu_1436_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_80_i_i_i_cast7_fu_1429_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_82_i_i_i_fu_1439_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_83_i_i_i_fu_1443_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_53_fu_1455_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_i_i_i_fu_1449_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_36_fu_1463_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_37_fu_1467_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_52_fu_1477_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Val2_54_fu_1494_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_1517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_1505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_tmp_s_fu_1523_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1544_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal loc_V_6_fu_1562_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i1_cast4_fu_1576_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_2_fu_1580_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_81_i_i_i1_fu_1594_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_i_i_i1_cast_fu_1600_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal loc_V_8_fu_1616_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_i_i8_cast2_fu_1630_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_4_fu_1634_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_81_i_i_i2_fu_1648_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_81_i_i_i2_cast_fu_1654_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_fu_1670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_1675_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_80_i_i_i1_fu_1694_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_3_cast_fu_1707_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_3_cast_cas_fu_1710_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_80_i_i_i1_cast5_fu_1703_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_82_i_i_i1_fu_1713_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_83_i_i_i1_fu_1717_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_57_fu_1729_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_i_i_i1_fu_1723_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_38_fu_1737_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_39_fu_1741_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_80_i_i_i7_fu_1758_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sh_assign_5_cast_fu_1771_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_5_cast_cas_fu_1774_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_80_i_i_i7_cast3_fu_1767_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_82_i_i_i2_fu_1777_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_83_i_i_i2_fu_1781_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_61_fu_1793_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_i_i_i2_fu_1787_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_40_fu_1801_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_41_fu_1805_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_86_i_i_i1_fu_1829_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_43_fu_1822_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_i_i_i1_fu_1832_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_i_i_i2_fu_1853_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_44_fu_1846_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_89_i_i_i2_fu_1856_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_59_fu_1838_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_64_fu_1862_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_397_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_397_ce : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (96 downto 0);
    signal grp_fu_1069_p00 : STD_LOGIC_VECTOR (125 downto 0);
    signal grp_fu_602_p00 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_602_p10 : STD_LOGIC_VECTOR (222 downto 0);
    signal grp_fu_909_p10 : STD_LOGIC_VECTOR (107 downto 0);
    signal grp_fu_921_p10 : STD_LOGIC_VECTOR (92 downto 0);
    signal grp_fu_980_p00 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_980_p10 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_992_p00 : STD_LOGIC_VECTOR (59 downto 0);
    signal grp_fu_992_p10 : STD_LOGIC_VECTOR (59 downto 0);

    component scaled_fixed2ieee IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V : IN STD_LOGIC_VECTOR (62 downto 0);
        prescale : IN STD_LOGIC_VECTOR (11 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component vibrato_faddfsub_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vibrato_fmul_32nsibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vibrato_sitofp_32jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vibrato_fptrunc_6kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vibrato_fpext_32nlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component vibrato_fcmp_32nsmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vibrato_dadd_64nsncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component vibrato_dmul_64nsocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component vibrato_mul_53ns_pcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (52 downto 0);
        din1 : IN STD_LOGIC_VECTOR (169 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (222 downto 0) );
    end component;


    component vibrato_mux_83_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vibrato_mul_49ns_qcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (97 downto 0) );
    end component;


    component vibrato_mul_52s_5rcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (51 downto 0);
        din1 : IN STD_LOGIC_VECTOR (55 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (107 downto 0) );
    end component;


    component vibrato_mul_44s_4sc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (43 downto 0);
        din1 : IN STD_LOGIC_VECTOR (48 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (92 downto 0) );
    end component;


    component vibrato_mul_33ns_tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (32 downto 0);
        din1 : IN STD_LOGIC_VECTOR (41 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (74 downto 0) );
    end component;


    component vibrato_mul_25ns_udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (34 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (59 downto 0) );
    end component;


    component vibrato_mul_63ns_vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (62 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (125 downto 0) );
    end component;


    component vibrato_mux_164_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (0 downto 0);
        din5 : IN STD_LOGIC_VECTOR (0 downto 0);
        din6 : IN STD_LOGIC_VECTOR (0 downto 0);
        din7 : IN STD_LOGIC_VECTOR (0 downto 0);
        din8 : IN STD_LOGIC_VECTOR (0 downto 0);
        din9 : IN STD_LOGIC_VECTOR (0 downto 0);
        din10 : IN STD_LOGIC_VECTOR (0 downto 0);
        din11 : IN STD_LOGIC_VECTOR (0 downto 0);
        din12 : IN STD_LOGIC_VECTOR (0 downto 0);
        din13 : IN STD_LOGIC_VECTOR (0 downto 0);
        din14 : IN STD_LOGIC_VECTOR (0 downto 0);
        din15 : IN STD_LOGIC_VECTOR (0 downto 0);
        din16 : IN STD_LOGIC_VECTOR (0 downto 0);
        din17 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vibrato_hls_ref_4bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (255 downto 0) );
    end component;


    component vibrato_hls_hotbmcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (58 downto 0) );
    end component;


    component vibrato_hls_hotbmdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component vibrato_hls_hotbmeOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component vibrato_hls_hotbmfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component vibrato_hls_hotbmg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component vibrato_buffer_r IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vibrato_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        delay : OUT STD_LOGIC_VECTOR (31 downto 0);
        depth : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    hls_ref_4oPi_table_s_U : component vibrato_hls_ref_4bkb
    generic map (
        DataWidth => 256,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hls_ref_4oPi_table_s_address0,
        ce0 => hls_ref_4oPi_table_s_ce0,
        q0 => hls_ref_4oPi_table_s_q0);

    hls_hotbm_fourth_o_4_U : component vibrato_hls_hotbmcud
    generic map (
        DataWidth => 59,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hls_hotbm_fourth_o_4_address0,
        ce0 => hls_hotbm_fourth_o_4_ce0,
        q0 => hls_hotbm_fourth_o_4_q0);

    hls_hotbm_fourth_o_5_U : component vibrato_hls_hotbmdEe
    generic map (
        DataWidth => 52,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hls_hotbm_fourth_o_5_address0,
        ce0 => hls_hotbm_fourth_o_5_ce0,
        q0 => hls_hotbm_fourth_o_5_q0);

    hls_hotbm_fourth_o_6_U : component vibrato_hls_hotbmeOg
    generic map (
        DataWidth => 44,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hls_hotbm_fourth_o_6_address0,
        ce0 => hls_hotbm_fourth_o_6_ce0,
        q0 => hls_hotbm_fourth_o_6_q0);

    hls_hotbm_fourth_o_7_U : component vibrato_hls_hotbmfYi
    generic map (
        DataWidth => 33,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hls_hotbm_fourth_o_7_address0,
        ce0 => hls_hotbm_fourth_o_7_ce0,
        q0 => hls_hotbm_fourth_o_7_q0);

    hls_hotbm_fourth_o_U : component vibrato_hls_hotbmg8j
    generic map (
        DataWidth => 25,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => hls_hotbm_fourth_o_address0,
        ce0 => hls_hotbm_fourth_o_ce0,
        q0 => hls_hotbm_fourth_o_q0);

    buffer_r_U : component vibrato_buffer_r
    generic map (
        DataWidth => 32,
        AddressRange => 24000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => buffer_r_address0,
        ce0 => buffer_r_ce0,
        q0 => buffer_r_q0,
        address1 => buffer_r_address1,
        ce1 => buffer_r_ce1,
        we1 => buffer_r_we1,
        d1 => tmp_63_reg_1893,
        q1 => buffer_r_q1);

    vibrato_CTRL_BUS_s_axi_U : component vibrato_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        delay => delay,
        depth => depth);

    grp_scaled_fixed2ieee_fu_391 : component scaled_fixed2ieee
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_scaled_fixed2ieee_fu_391_ap_start,
        ap_done => grp_scaled_fixed2ieee_fu_391_ap_done,
        ap_idle => grp_scaled_fixed2ieee_fu_391_ap_idle,
        ap_ready => grp_scaled_fixed2ieee_fu_391_ap_ready,
        in_V => result_V_reg_2220,
        prescale => r_V_1_reg_2225,
        ap_return => grp_scaled_fixed2ieee_fu_391_ap_return);

    vibrato_faddfsub_hbi_U5 : component vibrato_faddfsub_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_397_p0,
        din1 => grp_fu_397_p1,
        opcode => grp_fu_397_opcode,
        ce => grp_fu_397_ce,
        dout => grp_fu_397_p2);

    vibrato_fmul_32nsibs_U6 : component vibrato_fmul_32nsibs
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_447,
        din1 => grp_fu_403_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_403_p2);

    vibrato_sitofp_32jbC_U7 : component vibrato_sitofp_32jbC
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_409_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_409_p1);

    vibrato_fptrunc_6kbM_U8 : component vibrato_fptrunc_6kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_412_p0,
        dout => grp_fu_412_p1);

    vibrato_fpext_32nlbW_U9 : component vibrato_fpext_32nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_415_p0,
        dout => grp_fu_415_p1);

    vibrato_fcmp_32nsmb6_U10 : component vibrato_fcmp_32nsmb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => reg_441,
        din1 => ap_const_lv32_46BB8000,
        opcode => ap_const_lv5_2,
        dout => tmp_33_fu_418_p2);

    vibrato_dadd_64nsncg_U11 : component vibrato_dadd_64nsncg
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_423_p0,
        din1 => grp_fu_423_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_423_p2);

    vibrato_dmul_64nsocq_U12 : component vibrato_dmul_64nsocq
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_429_p0,
        din1 => grp_fu_429_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_429_p2);

    vibrato_mul_53ns_pcA_U13 : component vibrato_mul_53ns_pcA
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 53,
        din1_WIDTH => 170,
        dout_WIDTH => 223)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_602_p0,
        din1 => grp_fu_602_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_602_p2);

    vibrato_mux_83_1_1_U14 : component vibrato_mux_83_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 3,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_1,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_0,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_0,
        din9 => p_Val2_65_reg_1965,
        dout => cos_basis_fu_830_p10);

    vibrato_mul_49ns_qcK_U15 : component vibrato_mul_49ns_qcK
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_854_p0,
        din1 => grp_fu_854_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_854_p2);

    vibrato_mul_49ns_qcK_U16 : component vibrato_mul_49ns_qcK
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_892_p0,
        din1 => grp_fu_892_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_892_p2);

    vibrato_mul_49ns_qcK_U17 : component vibrato_mul_49ns_qcK
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 49,
        din1_WIDTH => 49,
        dout_WIDTH => 98)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_897_p0,
        din1 => grp_fu_897_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_897_p2);

    vibrato_mul_52s_5rcU_U18 : component vibrato_mul_52s_5rcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 52,
        din1_WIDTH => 56,
        dout_WIDTH => 108)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => hls_hotbm_fourth_o_9_reg_2078,
        din1 => grp_fu_909_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_909_p2);

    vibrato_mul_44s_4sc4_U19 : component vibrato_mul_44s_4sc4
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 44,
        din1_WIDTH => 49,
        dout_WIDTH => 93)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => hls_hotbm_fourth_o_11_reg_2083,
        din1 => grp_fu_921_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_921_p2);

    vibrato_mul_33ns_tde_U20 : component vibrato_mul_33ns_tde
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 33,
        din1_WIDTH => 42,
        dout_WIDTH => 75)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_980_p0,
        din1 => grp_fu_980_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_980_p2);

    vibrato_mul_25ns_udo_U21 : component vibrato_mul_25ns_udo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 25,
        din1_WIDTH => 35,
        dout_WIDTH => 60)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_992_p0,
        din1 => grp_fu_992_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_992_p2);

    vibrato_mul_63ns_vdy_U22 : component vibrato_mul_63ns_vdy
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 63,
        din1_WIDTH => 64,
        dout_WIDTH => 126)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1069_p0,
        din1 => r_V_reg_2205,
        ce => ap_const_logic_1,
        dout => grp_fu_1069_p2);

    vibrato_mux_164_1_1_U23 : component vibrato_mux_164_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_0,
        din4 => ap_const_lv1_1,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_1,
        din8 => ap_const_lv1_0,
        din9 => ap_const_lv1_0,
        din10 => ap_const_lv1_1,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_1,
        din14 => ap_const_lv1_0,
        din15 => ap_const_lv1_0,
        din16 => ap_const_lv1_0,
        din17 => p_Result_40_fu_1128_p3,
        dout => tmp_28_fu_1134_p18);

    vibrato_mux_164_1_1_U24 : component vibrato_mux_164_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 1,
        din5_WIDTH => 1,
        din6_WIDTH => 1,
        din7_WIDTH => 1,
        din8_WIDTH => 1,
        din9_WIDTH => 1,
        din10_WIDTH => 1,
        din11_WIDTH => 1,
        din12_WIDTH => 1,
        din13_WIDTH => 1,
        din14_WIDTH => 1,
        din15_WIDTH => 1,
        din16_WIDTH => 1,
        din17_WIDTH => 4,
        dout_WIDTH => 1)
    port map (
        din1 => ap_const_lv1_0,
        din2 => ap_const_lv1_0,
        din3 => ap_const_lv1_1,
        din4 => ap_const_lv1_0,
        din5 => ap_const_lv1_1,
        din6 => ap_const_lv1_1,
        din7 => ap_const_lv1_0,
        din8 => ap_const_lv1_1,
        din9 => ap_const_lv1_1,
        din10 => ap_const_lv1_0,
        din11 => ap_const_lv1_1,
        din12 => ap_const_lv1_1,
        din13 => ap_const_lv1_0,
        din14 => ap_const_lv1_1,
        din15 => ap_const_lv1_0,
        din16 => ap_const_lv1_0,
        din17 => p_Result_40_fu_1128_p3,
        dout => tmp_29_fu_1172_p18);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_scaled_fixed2ieee_fu_391_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_grp_scaled_fixed2ieee_fu_391_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                    ap_reg_grp_scaled_fixed2ieee_fu_391_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_scaled_fixed2ieee_fu_391_ap_ready)) then 
                    ap_reg_grp_scaled_fixed2ieee_fu_391_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    in_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_V_0_ack_out) and (ap_const_logic_1 = in_V_0_vld_out))) then 
                                        in_V_0_sel_rd <= not(in_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_V_0_vld_in) and (ap_const_logic_1 = in_V_0_ack_in))) then 
                                        in_V_0_sel_wr <= not(in_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in_V_0_vld_in) and (ap_const_logic_1 = in_V_0_ack_out) and (in_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_V_0_vld_in) and (in_V_0_state = ap_const_lv2_2)))) then 
                    in_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in_V_0_vld_in) and (ap_const_logic_0 = in_V_0_ack_out) and (in_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_V_0_ack_out) and (in_V_0_state = ap_const_lv2_1)))) then 
                    in_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in_V_0_vld_in) and (in_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = in_V_0_ack_out) and (in_V_0_state = ap_const_lv2_1)) or ((in_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = in_V_0_vld_in) and (ap_const_logic_0 = in_V_0_ack_out))) and not(((ap_const_logic_0 = in_V_0_vld_in) and (ap_const_logic_1 = in_V_0_ack_out)))))) then 
                    in_V_0_state <= ap_const_lv2_3;
                else 
                    in_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_1_ack_out) and (ap_const_logic_1 = out_V_1_vld_out))) then 
                                        out_V_1_sel_rd <= not(out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_logic_1 = out_V_1_ack_in))) then 
                                        out_V_1_sel_wr <= not(out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_V_1_vld_in) and (ap_const_logic_1 = out_V_1_ack_out) and (ap_const_lv2_3 = out_V_1_state)) or ((ap_const_logic_0 = out_V_1_vld_in) and (ap_const_lv2_2 = out_V_1_state)))) then 
                    out_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_logic_0 = out_V_1_ack_out) and (ap_const_lv2_3 = out_V_1_state)) or ((ap_const_logic_0 = out_V_1_ack_out) and (ap_const_lv2_1 = out_V_1_state)))) then 
                    out_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_lv2_2 = out_V_1_state)) or ((ap_const_logic_1 = out_V_1_ack_out) and (ap_const_lv2_1 = out_V_1_state)) or ((ap_const_lv2_3 = out_V_1_state) and not(((ap_const_logic_1 = out_V_1_vld_in) and (ap_const_logic_0 = out_V_1_ack_out))) and not(((ap_const_logic_0 = out_V_1_vld_in) and (ap_const_logic_1 = out_V_1_ack_out)))))) then 
                    out_V_1_state <= ap_const_lv2_3;
                else 
                    out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                reg_476 <= buffer_r_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
                reg_476 <= buffer_r_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                Ex_V_reg_2011 <= Ex_V_fu_750_p2;
                Mx_V_reg_2004 <= p_Val2_26_fu_732_p2(123 downto 61);
                isNeg_reg_2016 <= Ex_V_fu_750_p2(10 downto 10);
                sh_assign_6_reg_2021 <= sh_assign_6_fu_774_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                Initialized <= ap_const_lv1_1;
                Initialized_load_reg_1882 <= Initialized;
                delay_read_reg_1877 <= delay;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                Mx_V_read_assign_reg_2200 <= Mx_V_read_assign_fu_1040_p3;
                r_V_reg_2205 <= r_V_fu_1057_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Mx_zeros_V_reg_1986 <= Mx_zeros_V_fu_709_p1;
                tmp_42_i_reg_1992 <= tmp_42_i_fu_713_p2;
                tmp_44_i_reg_1998 <= tmp_44_i_fu_718_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                    OP1_V_reg_2048(48 downto 0) <= OP1_V_fu_851_p1(48 downto 0);
                cos_basis_reg_2041 <= cos_basis_fu_830_p10;
                    tmp_64_i_i_reg_2055(7 downto 0) <= tmp_64_i_i_fu_873_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                closepath_reg_1917 <= closepath_fu_530_p2;
                loc_V_1_reg_1911 <= loc_V_1_fu_526_p1;
                loc_V_reg_1904 <= p_Val2_3_fu_505_p1(62 downto 52);
                results_sign_V_1_reg_1898 <= p_Val2_3_fu_505_p1(63 downto 63);
                tmp_24_reg_1928 <= tmp_24_fu_565_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                hls_hotbm_fourth_o_11_reg_2083 <= hls_hotbm_fourth_o_6_q0;
                hls_hotbm_fourth_o_9_reg_2078 <= hls_hotbm_fourth_o_5_q0;
                tmp_58_i_i_reg_2072 <= grp_fu_854_p2(97 downto 49);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                hls_hotbm_fourth_o_13_reg_2155 <= hls_hotbm_fourth_o_7_q0;
                hls_hotbm_fourth_o_15_reg_2160 <= hls_hotbm_fourth_o_q0;
                p_Val2_38_reg_2140 <= hls_hotbm_fourth_o_4_q0;
                tmp_35_i_i_reg_2145 <= grp_fu_909_p2(107 downto 52);
                tmp_37_i_i_reg_2150 <= grp_fu_921_p2(92 downto 45);
                tmp_60_i_i_reg_2130 <= grp_fu_892_p2(97 downto 56);
                tmp_62_i_i_reg_2135 <= grp_fu_897_p2(97 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_V_0_load_A)) then
                in_V_0_payload_A <= in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_V_0_load_B)) then
                in_V_0_payload_B <= in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                isNeg_1_reg_2278 <= sh_assign_fu_1388_p2(8 downto 8);
                loc_V_5_reg_2273 <= loc_V_5_fu_1380_p1;
                p_Result_42_reg_2268 <= p_Val2_50_fu_1358_p1(31 downto 31);
                sh_assign_1_reg_2283 <= sh_assign_1_fu_1412_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) and (ap_const_lv1_1 = tmp_14_reg_2306))) then
                isNeg_2_reg_2331 <= sh_assign_2_fu_1580_p2(8 downto 8);
                loc_V_7_reg_2326 <= loc_V_7_fu_1572_p1;
                p_Val2_55_reg_2321 <= p_Val2_55_fu_1558_p1;
                sh_assign_3_reg_2336 <= sh_assign_3_fu_1604_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state74) and (ap_const_lv1_0 = tmp_14_reg_2306))) then
                isNeg_3_reg_2352 <= sh_assign_4_fu_1634_p2(8 downto 8);
                loc_V_9_reg_2347 <= loc_V_9_fu_1626_p1;
                p_Val2_60_reg_2342 <= p_Val2_60_fu_1612_p1;
                sh_assign_5_reg_2357 <= sh_assign_5_fu_1658_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_1_load_A)) then
                out_V_1_payload_A <= grp_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_V_1_load_B)) then
                out_V_1_payload_B <= grp_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Result_i3_i_i_reg_1976 <= p_Val2_8_fu_654_p3(123 downto 63);
                p_Val2_65_reg_1965 <= p_Val2_65_fu_639_p3;
                p_Val2_8_reg_1971 <= p_Val2_8_fu_654_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                p_Result_i_i_reg_2026 <= p_Val2_s_fu_799_p3(62 downto 56);
                p_Val2_28_reg_2031 <= p_Val2_28_fu_816_p1;
                tmp_i1_i_reg_2036 <= p_Val2_s_fu_799_p3(55 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                p_Result_s_reg_2235 <= p_Result_s_fu_1238_p3;
                ret_V_6_reg_2240 <= ret_V_6_fu_1268_p3;
                ret_V_7_reg_2245 <= ret_V_7_fu_1284_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                p_Val2_43_reg_2185 <= p_Val2_43_fu_1014_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = tmp_14_reg_2306) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                p_Val2_57_reg_2363 <= p_Val2_57_fu_1751_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = tmp_14_reg_2306) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                p_Val2_62_reg_2368 <= p_Val2_62_fu_1815_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Val2_7_reg_1954 <= grp_fu_602_p2(166 downto 43);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                phaseStep <= grp_fu_412_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                r_V_1_reg_2225 <= r_V_1_fu_1096_p2;
                result_V_reg_2220 <= grp_fu_1069_p2(125 downto 63);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                readPos_load_reg_2299 <= readPos_load_fu_1531_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state49))) then
                reg_435 <= grp_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state62))) then
                reg_441 <= grp_fu_412_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state96) and (out_V_1_ack_in = ap_const_logic_1)))) then
                reg_447 <= grp_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state91))) then
                reg_453 <= grp_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                reg_459 <= grp_fu_415_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state61))) then
                reg_464 <= grp_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state82))) then
                reg_471 <= grp_fu_409_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_scaled_fixed2ieee_fu_391_ap_done = ap_const_logic_1))) then
                resultf_reg_2230 <= grp_scaled_fixed2ieee_fu_391_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ret_V_reg_1933 <= r_V_4_fu_572_p2(255 downto 86);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                storemerge6_reg_2263 <= storemerge6_fu_1350_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state76)) then
                storemerge_reg_2373 <= storemerge_fu_1870_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_10_reg_2190 <= grp_fu_980_p2(74 downto 38);
                tmp_21_reg_2195 <= grp_fu_992_p2(59 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                tmp_14_reg_2306 <= tmp_14_fu_1539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                tmp_33_reg_2258 <= tmp_33_fu_418_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_43_i_reg_1948 <= tmp_43_i_fu_608_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = closepath_reg_1917))) then
                tmp_47_i_i_reg_1960 <= grp_fu_602_p2(169 downto 167);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_V_0_vld_out = ap_const_logic_1))) then
                tmp_63_reg_1893 <= in_V_0_data_out;
                x_assign_reg_1887 <= x_assign_fu_498_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                    tmp_86_i_i_i_reg_2289(30 downto 0) <= tmp_86_i_i_i_fu_1484_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state71) and (ap_const_lv1_1 = p_Result_42_reg_2268))) then
                tmp_89_i_i_i_reg_2294 <= tmp_89_i_i_i_fu_1488_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_1 = closepath_reg_1917))) then
                tmp_i_i_reg_1981 <= tmp_i_i_fu_671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                writePos <= storemerge5_fu_1680_p3;
            end if;
        end if;
    end process;
    OP1_V_reg_2048(97 downto 49) <= "0000000000000000000000000000000000000000000000000";
    tmp_64_i_i_reg_2055(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    tmp_86_i_i_i_reg_2289(31) <= '0';

    ap_NS_fsm_assign_proc : process (in_V_0_vld_out, out_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state26, grp_scaled_fixed2ieee_fu_391_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (grp_scaled_fixed2ieee_fu_391_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state96) and (out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state97 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state97) and (out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Ex_V_fu_750_p2 <= std_logic_vector(unsigned(storemerge_i_i_fu_723_p3) - unsigned(tmp_51_i_i_fu_747_p1));
    Mx_V_read_assign_fu_1040_p3 <= 
        ap_const_lv63_7FFFFFFFFFFFFFFF when (cos_basis_reg_2041(0) = '1') else 
        Mx_V_reg_2004;
    Mx_zeros_V_fu_709_p1 <= tmp_i4_i_i_fu_701_p3(6 - 1 downto 0);
    OP1_V_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i1_i_reg_2036),98));
    OP2_V_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_i_i_reg_2072),98));
    addr_V_fu_542_p3 <= 
        ap_const_lv11_4A when (closepath_fu_530_p2(0) = '1') else 
        expv_op_i_fu_536_p2;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    buffer_r_address0_assign_proc : process(ap_CS_fsm_state73, ap_CS_fsm_state72, tmp_16_fu_1549_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            buffer_r_address0 <= tmp_16_fu_1549_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            buffer_r_address0 <= ap_const_lv15_0;
        else 
            buffer_r_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_r_address1_assign_proc : process(ap_CS_fsm_state73, ap_CS_fsm_state74, tmp_17_fu_1554_p1, tmp_22_fu_1666_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            buffer_r_address1 <= tmp_22_fu_1666_p1(15 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            buffer_r_address1 <= tmp_17_fu_1554_p1(15 - 1 downto 0);
        else 
            buffer_r_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    buffer_r_ce0_assign_proc : process(ap_CS_fsm_state73, ap_CS_fsm_state72)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72))) then 
            buffer_r_ce0 <= ap_const_logic_1;
        else 
            buffer_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_ce1_assign_proc : process(ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            buffer_r_ce1 <= ap_const_logic_1;
        else 
            buffer_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_r_we1_assign_proc : process(ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            buffer_r_we1 <= ap_const_logic_1;
        else 
            buffer_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    closepath_fu_530_p2 <= "1" when (unsigned(loc_V_fu_516_p4) < unsigned(ap_const_lv11_3FE)) else "0";
    expv_op_i_fu_536_p2 <= std_logic_vector(signed(ap_const_lv11_44D) + signed(loc_V_fu_516_p4));
    grp_fu_1069_p0 <= grp_fu_1069_p00(63 - 1 downto 0);
    grp_fu_1069_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_V_read_assign_reg_2200),126));

    grp_fu_397_ce_assign_proc : process(out_V_1_ack_in, ap_CS_fsm_state96, ap_CS_fsm_state33, ap_CS_fsm_state69, ap_CS_fsm_state87, ap_CS_fsm_state29, ap_CS_fsm_state65, ap_CS_fsm_state83, ap_CS_fsm_state92, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state87) or ((ap_const_logic_1 = ap_CS_fsm_state96) and (out_V_1_ack_in = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
            grp_fu_397_ce <= ap_const_logic_1;
        else 
            grp_fu_397_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_397_opcode_assign_proc : process(ap_CS_fsm_state29, ap_CS_fsm_state65, ap_CS_fsm_state83, ap_CS_fsm_state92)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state83))) then 
            grp_fu_397_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state92))) then 
            grp_fu_397_opcode <= ap_const_lv2_0;
        else 
            grp_fu_397_opcode <= "XX";
        end if; 
    end process;


    grp_fu_397_p0_assign_proc : process(reg_441, reg_471, reg_476, ap_CS_fsm_state29, ap_CS_fsm_state65, ap_CS_fsm_state83, ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            grp_fu_397_p0 <= reg_476;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state83))) then 
            grp_fu_397_p0 <= reg_471;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_397_p0 <= reg_441;
        else 
            grp_fu_397_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_397_p1_assign_proc : process(reg_453, reg_476, storemerge6_reg_2263, ap_CS_fsm_state29, ap_CS_fsm_state65, ap_CS_fsm_state83, ap_CS_fsm_state92)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            grp_fu_397_p1 <= reg_453;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            grp_fu_397_p1 <= reg_476;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            grp_fu_397_p1 <= storemerge6_reg_2263;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_397_p1 <= ap_const_lv32_3F800000;
        else 
            grp_fu_397_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_403_p1_assign_proc : process(ap_CS_fsm_state34, ap_CS_fsm_state88)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            grp_fu_403_p1 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_403_p1 <= ap_const_lv32_3F000000;
        else 
            grp_fu_403_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_409_p0_assign_proc : process(writePos, ap_CS_fsm_state59, storemerge_reg_2373, ap_CS_fsm_state77)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            grp_fu_409_p0 <= storemerge_reg_2373;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            grp_fu_409_p0 <= writePos;
        else 
            grp_fu_409_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_412_p0_assign_proc : process(reg_435, ap_CS_fsm_state28, ap_CS_fsm_state62, reg_464, ap_CS_fsm_state8, ret_i_i_i_fu_1299_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            grp_fu_412_p0 <= reg_464;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_412_p0 <= ret_i_i_i_fu_1299_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_412_p0 <= reg_435;
        else 
            grp_fu_412_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_415_p0_assign_proc : process(phaseStep, ap_CS_fsm_state2, ap_CS_fsm_state49, reg_453, ap_CS_fsm_state38, delay_read_reg_1877)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_415_p0 <= delay_read_reg_1877;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_415_p0 <= reg_453;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_415_p0 <= phaseStep;
        else 
            grp_fu_415_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_423_p0_assign_proc : process(reg_464, x_assign_reg_1887, ap_CS_fsm_state3, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_423_p0 <= reg_464;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_423_p0 <= x_assign_reg_1887;
        else 
            grp_fu_423_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_423_p1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_423_p1 <= ap_const_lv64_3FF0000000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_423_p1 <= ap_const_lv64_3FC999999999999A;
        else 
            grp_fu_423_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_429_p0_assign_proc : process(reg_459, reg_464, ap_CS_fsm_state39, ap_CS_fsm_state50, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_429_p0 <= reg_464;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state50))) then 
            grp_fu_429_p0 <= reg_459;
        else 
            grp_fu_429_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_429_p1_assign_proc : process(reg_435, ap_CS_fsm_state39, ap_CS_fsm_state50, ap_CS_fsm_state56)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_429_p1 <= ap_const_lv64_40E7700000000000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            grp_fu_429_p1 <= reg_435;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_429_p1 <= ap_const_lv64_3FD47AE147AE147B;
        else 
            grp_fu_429_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_602_p0 <= grp_fu_602_p00(53 - 1 downto 0);
    grp_fu_602_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_34_fu_588_p3),223));
    grp_fu_602_p1 <= grp_fu_602_p10(170 - 1 downto 0);
    grp_fu_602_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1933),223));
    grp_fu_854_p0 <= OP1_V_fu_851_p1(49 - 1 downto 0);
    grp_fu_854_p1 <= OP1_V_fu_851_p1(49 - 1 downto 0);
    grp_fu_892_p0 <= OP2_V_fu_889_p1(49 - 1 downto 0);
    grp_fu_892_p1 <= OP1_V_reg_2048(49 - 1 downto 0);
    grp_fu_897_p0 <= OP2_V_fu_889_p1(49 - 1 downto 0);
    grp_fu_897_p1 <= OP2_V_fu_889_p1(49 - 1 downto 0);
    grp_fu_909_p1 <= grp_fu_909_p10(56 - 1 downto 0);
    grp_fu_909_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_28_reg_2031),108));
    grp_fu_921_p1 <= grp_fu_921_p10(49 - 1 downto 0);
    grp_fu_921_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_58_i_i_reg_2072),93));
    grp_fu_980_p0 <= grp_fu_980_p00(33 - 1 downto 0);
    grp_fu_980_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hls_hotbm_fourth_o_13_reg_2155),75));
    grp_fu_980_p1 <= grp_fu_980_p10(42 - 1 downto 0);
    grp_fu_980_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_60_i_i_reg_2130),75));
    grp_fu_992_p0 <= grp_fu_992_p00(25 - 1 downto 0);
    grp_fu_992_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(hls_hotbm_fourth_o_15_reg_2160),60));
    grp_fu_992_p1 <= grp_fu_992_p10(35 - 1 downto 0);
    grp_fu_992_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_i_i_reg_2135),60));
    grp_scaled_fixed2ieee_fu_391_ap_start <= ap_reg_grp_scaled_fixed2ieee_fu_391_ap_start;
    hls_hotbm_fourth_o_4_address0 <= tmp_64_i_i_reg_2055(8 - 1 downto 0);

    hls_hotbm_fourth_o_4_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            hls_hotbm_fourth_o_4_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_5_address0 <= tmp_64_i_i_fu_873_p1(8 - 1 downto 0);

    hls_hotbm_fourth_o_5_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hls_hotbm_fourth_o_5_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_6_address0 <= tmp_64_i_i_fu_873_p1(8 - 1 downto 0);

    hls_hotbm_fourth_o_6_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            hls_hotbm_fourth_o_6_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_7_address0 <= tmp_64_i_i_reg_2055(8 - 1 downto 0);

    hls_hotbm_fourth_o_7_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            hls_hotbm_fourth_o_7_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_hotbm_fourth_o_address0 <= tmp_64_i_i_reg_2055(8 - 1 downto 0);

    hls_hotbm_fourth_o_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            hls_hotbm_fourth_o_ce0 <= ap_const_logic_1;
        else 
            hls_hotbm_fourth_o_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    hls_ref_4oPi_table_s_address0 <= tmp_i2_i_i_fu_560_p1(4 - 1 downto 0);

    hls_ref_4oPi_table_s_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            hls_ref_4oPi_table_s_ce0 <= ap_const_logic_1;
        else 
            hls_ref_4oPi_table_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    in_V_0_ack_in <= in_V_0_state(1);

    in_V_0_ack_out_assign_proc : process(in_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (in_V_0_vld_out = ap_const_logic_1))) then 
            in_V_0_ack_out <= ap_const_logic_1;
        else 
            in_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_V_0_data_out_assign_proc : process(in_V_0_payload_A, in_V_0_payload_B, in_V_0_sel)
    begin
        if ((ap_const_logic_1 = in_V_0_sel)) then 
            in_V_0_data_out <= in_V_0_payload_B;
        else 
            in_V_0_data_out <= in_V_0_payload_A;
        end if; 
    end process;

    in_V_0_load_A <= (in_V_0_state_cmp_full and not(in_V_0_sel_wr));
    in_V_0_load_B <= (in_V_0_sel_wr and in_V_0_state_cmp_full);
    in_V_0_sel <= in_V_0_sel_rd;
    in_V_0_state_cmp_full <= '0' when (in_V_0_state = ap_const_lv2_1) else '1';
    in_V_0_vld_in <= in_V_TVALID;
    in_V_0_vld_out <= in_V_0_state(0);

    in_V_TDATA_blk_n_assign_proc : process(in_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_V_TDATA_blk_n <= in_V_0_state(0);
        else 
            in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_V_TREADY <= in_V_0_state(1);
    isNeg_1_fu_1394_p3 <= sh_assign_fu_1388_p2(8 downto 8);
    isNeg_2_fu_1586_p3 <= sh_assign_2_fu_1580_p2(8 downto 8);
    isNeg_3_fu_1640_p3 <= sh_assign_4_fu_1634_p2(8 downto 8);
    isNeg_fu_760_p3 <= Ex_V_fu_750_p2(10 downto 10);
    loc_V_1_fu_526_p1 <= p_Val2_3_fu_505_p1(52 - 1 downto 0);
    loc_V_2_fu_1114_p4 <= p_Val2_46_fu_1103_p1(62 downto 52);
    loc_V_3_fu_1124_p1 <= p_Val2_46_fu_1103_p1(52 - 1 downto 0);
    loc_V_4_fu_1370_p4 <= p_Val2_50_fu_1358_p1(30 downto 23);
    loc_V_5_fu_1380_p1 <= p_Val2_50_fu_1358_p1(23 - 1 downto 0);
    loc_V_6_fu_1562_p4 <= p_Val2_55_fu_1558_p1(30 downto 23);
    loc_V_7_fu_1572_p1 <= p_Val2_55_fu_1558_p1(23 - 1 downto 0);
    loc_V_8_fu_1616_p4 <= p_Val2_60_fu_1612_p1(30 downto 23);
    loc_V_9_fu_1626_p1 <= p_Val2_60_fu_1612_p1(23 - 1 downto 0);
    loc_V_fu_516_p4 <= p_Val2_3_fu_505_p1(62 downto 52);
    not_or_cond_i_demorg_fu_1245_p2 <= (tmp_42_i_reg_1992 and tmp_43_i_reg_1948);
    not_or_cond_i_fu_1249_p2 <= (not_or_cond_i_demorg_fu_1245_p2 xor ap_const_lv1_1);
    not_tmp_i_fu_1227_p2 <= (tmp_44_i_reg_1998 xor ap_const_lv1_1);
    notlhs_fu_1327_p2 <= "0" when (tmp_31_fu_1313_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_1333_p2 <= "1" when (tmp_49_fu_1323_p1 = ap_const_lv23_0) else "0";
    or_cond_i_fu_1223_p2 <= (tmp_42_i_reg_1992 and tmp_43_i_reg_1948);
    out_V_1_ack_in <= out_V_1_state(1);
    out_V_1_ack_out <= out_V_TREADY;

    out_V_1_data_out_assign_proc : process(out_V_1_payload_A, out_V_1_payload_B, out_V_1_sel)
    begin
        if ((ap_const_logic_1 = out_V_1_sel)) then 
            out_V_1_data_out <= out_V_1_payload_B;
        else 
            out_V_1_data_out <= out_V_1_payload_A;
        end if; 
    end process;

    out_V_1_load_A <= (out_V_1_state_cmp_full and not(out_V_1_sel_wr));
    out_V_1_load_B <= (out_V_1_sel_wr and out_V_1_state_cmp_full);
    out_V_1_sel <= out_V_1_sel_rd;
    out_V_1_state_cmp_full <= '0' when (out_V_1_state = ap_const_lv2_1) else '1';

    out_V_1_vld_in_assign_proc : process(out_V_1_ack_in, ap_CS_fsm_state96)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state96) and (out_V_1_ack_in = ap_const_logic_1))) then 
            out_V_1_vld_in <= ap_const_logic_1;
        else 
            out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_V_1_vld_out <= out_V_1_state(0);
    out_V_TDATA <= out_V_1_data_out;

    out_V_TDATA_blk_n_assign_proc : process(out_V_1_state, ap_CS_fsm_state96, ap_CS_fsm_state97)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state97))) then 
            out_V_TDATA_blk_n <= out_V_1_state(1);
        else 
            out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_TVALID <= out_V_1_state(0);
    p_Ex_V_ret_i_fu_1075_p3 <= 
        ap_const_lv11_0 when (cos_basis_reg_2041(0) = '1') else 
        Ex_V_reg_2011;
    p_Result_1_i_cast_fu_1255_p3 <= 
        ap_const_lv11_7FF when (not_or_cond_i_fu_1249_p2(0) = '1') else 
        ap_const_lv11_0;
    p_Result_2_i_cast_fu_1276_p3 <= 
        ap_const_lv52_FFFFFFFFFFFFF when (not_or_cond_i_fu_1249_p2(0) = '1') else 
        ap_const_lv52_0;
    p_Result_34_fu_588_p3 <= (ap_const_lv1_1 & loc_V_1_reg_1911);
    p_Result_35_fu_676_p3 <= (p_Result_i3_i_i_reg_1976 & ap_const_lv1_1);
    
    p_Result_36_fu_683_p4_proc : process(p_Result_35_fu_676_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(62+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable p_Result_36_fu_683_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(62 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3D(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := p_Result_35_fu_676_p3;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(62-1-unsigned(ap_const_lv32_3D(6-1 downto 0)));
            for p_Result_36_fu_683_p4_i in 0 to 62-1 loop
                v0_cpy(p_Result_36_fu_683_p4_i) := p_Result_35_fu_676_p3(62-1-p_Result_36_fu_683_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(62-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_36_fu_683_p4 <= resvalue(62-1 downto 0);
    end process;

    p_Result_37_fu_693_p3 <= (ap_const_lv2_3 & p_Result_36_fu_683_p4);
    p_Result_38_fu_866_p3 <= (sin_basis_fu_860_p2 & p_Result_i_i_reg_2026);
    p_Result_39_fu_1106_p3 <= p_Val2_46_fu_1103_p1(63 downto 63);
    p_Result_40_fu_1128_p3 <= (results_sign_V_1_reg_1898 & p_Val2_65_reg_1965);
    p_Result_41_fu_1292_p4 <= ((p_Result_s_reg_2235 & ret_V_6_reg_2240) & ret_V_7_reg_2245);
    p_Result_43_fu_1822_p3 <= p_Val2_55_reg_2321(31 downto 31);
    p_Result_44_fu_1846_p3 <= p_Val2_60_reg_2342(31 downto 31);
    p_Result_i_40_fu_1232_p2 <= (p_Result_i_fu_1217_p2 and not_tmp_i_fu_1227_p2);
    p_Result_i_fu_1217_p2 <= (tmp_41_i_fu_1210_p3 or p_Result_39_fu_1106_p3);
    p_Result_i_i_i_fu_550_p4 <= addr_V_fu_542_p3(10 downto 7);
    p_Result_s_fu_1238_p3 <= 
        results_sign_V_1_reg_1898 when (or_cond_i_fu_1223_p2(0) = '1') else 
        p_Result_i_40_fu_1232_p2;
    p_Val2_26_fu_732_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_8_reg_1971),to_integer(unsigned('0' & tmp_48_i_i_fu_729_p1(31-1 downto 0)))));
    p_Val2_28_fu_816_p1 <= p_Val2_s_fu_799_p3(56 - 1 downto 0);
    p_Val2_3_fu_505_p1 <= x_assign_reg_1887;
    p_Val2_40_fu_967_p3 <= (p_Val2_38_reg_2140 & ap_const_lv4_0);
    p_Val2_42_fu_1005_p2 <= std_logic_vector(signed(tmp_67_i_i_fu_1002_p1) + signed(tmp_66_i_i_fu_998_p1));
    p_Val2_43_fu_1014_p2 <= std_logic_vector(signed(tmp_69_i_i_cast_fu_1011_p1) + signed(p_Val2_42_fu_1005_p2));
    p_Val2_44_fu_1049_p2 <= std_logic_vector(unsigned(tmp_71_i_i_cast_fu_1046_p1) + unsigned(p_Val2_43_reg_2185));
    p_Val2_46_fu_1103_p1 <= resultf_reg_2230;
    p_Val2_50_fu_1358_p1 <= reg_447;
    p_Val2_52_fu_1477_p3 <= 
        tmp_36_fu_1463_p1 when (isNeg_1_reg_2278(0) = '1') else 
        tmp_37_fu_1467_p4;
    p_Val2_54_fu_1494_p3 <= 
        tmp_89_i_i_i_reg_2294 when (p_Result_42_reg_2268(0) = '1') else 
        tmp_86_i_i_i_reg_2289;
    p_Val2_55_fu_1558_p1 <= reg_476;
    p_Val2_57_fu_1751_p3 <= 
        tmp_38_fu_1737_p1 when (isNeg_2_reg_2331(0) = '1') else 
        tmp_39_fu_1741_p4;
    p_Val2_59_fu_1838_p3 <= 
        tmp_89_i_i_i1_fu_1832_p2 when (p_Result_43_fu_1822_p3(0) = '1') else 
        tmp_86_i_i_i1_fu_1829_p1;
    p_Val2_60_fu_1612_p1 <= buffer_r_q0;
    p_Val2_62_fu_1815_p3 <= 
        tmp_40_fu_1801_p1 when (isNeg_3_reg_2352(0) = '1') else 
        tmp_41_fu_1805_p4;
    p_Val2_64_fu_1862_p3 <= 
        tmp_89_i_i_i2_fu_1856_p2 when (p_Result_44_fu_1846_p3(0) = '1') else 
        tmp_86_i_i_i2_fu_1853_p1;
    p_Val2_65_fu_639_p3 <= 
        ap_const_lv3_0 when (closepath_reg_1917(0) = '1') else 
        tmp_47_i_i_reg_1960;
    p_Val2_8_fu_654_p3 <= 
        p_Val2_i_i_fu_649_p2 when (tmp_34_fu_645_p1(0) = '1') else 
        p_Val2_7_reg_1954;
    p_Val2_i_i_fu_649_p2 <= std_logic_vector(unsigned(ap_const_lv124_0) - unsigned(p_Val2_7_reg_1954));
    p_Val2_s_fu_799_p3 <= 
        tmp_55_i_i_fu_789_p2 when (isNeg_reg_2016(0) = '1') else 
        tmp_56_i_i_fu_794_p2;
    r_V_1_fu_1096_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(rhs_V_1_fu_1092_p1));
    r_V_4_fu_572_p2 <= std_logic_vector(shift_left(unsigned(hls_ref_4oPi_table_s_q0),to_integer(unsigned('0' & tmp_34_i_i_i_fu_569_p1(31-1 downto 0)))));
    r_V_fu_1057_p2 <= std_logic_vector(unsigned(tmp_73_i_i_cast_fu_1054_p1) + unsigned(p_Val2_44_fu_1049_p2));
    readPos_load_fu_1531_p3 <= 
        tmp_11_fu_1505_p2 when (tmp_1_fu_1499_p2(0) = '1') else 
        tmp_16_tmp_s_fu_1523_p3;
    ret_V_6_fu_1268_p3 <= 
        p_Result_1_i_cast_fu_1255_p3 when (tmp_30_fu_1263_p2(0) = '1') else 
        loc_V_2_fu_1114_p4;
    ret_V_7_fu_1284_p3 <= 
        p_Result_2_i_cast_fu_1276_p3 when (tmp_30_fu_1263_p2(0) = '1') else 
        loc_V_3_fu_1124_p1;
    ret_i_i_i_fu_1299_p1 <= p_Result_41_fu_1292_p4;
        rhs_V_1_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Ex_V_ret_i_fu_1075_p3),12));

        sh_assign_1_cast_cas_fu_1436_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_2283),25));

        sh_assign_1_cast_fu_1433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_reg_2283),32));

    sh_assign_1_fu_1412_p3 <= 
        tmp_81_i_i_i_cast_fu_1408_p1 when (isNeg_1_fu_1394_p3(0) = '1') else 
        sh_assign_fu_1388_p2;
    sh_assign_2_fu_1580_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i1_cast4_fu_1576_p1));
        sh_assign_3_cast_cas_fu_1710_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_reg_2336),25));

        sh_assign_3_cast_fu_1707_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_3_reg_2336),32));

    sh_assign_3_fu_1604_p3 <= 
        tmp_81_i_i_i1_cast_fu_1600_p1 when (isNeg_2_fu_1586_p3(0) = '1') else 
        sh_assign_2_fu_1580_p2;
    sh_assign_4_fu_1634_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i8_cast2_fu_1630_p1));
        sh_assign_5_cast_cas_fu_1774_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_reg_2357),25));

        sh_assign_5_cast_fu_1771_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_5_reg_2357),32));

    sh_assign_5_fu_1658_p3 <= 
        tmp_81_i_i_i2_cast_fu_1654_p1 when (isNeg_3_fu_1640_p3(0) = '1') else 
        sh_assign_4_fu_1634_p2;
    sh_assign_6_fu_774_p3 <= 
        tmp_53_i_i_fu_768_p2 when (isNeg_fu_760_p3(0) = '1') else 
        sh_i_cast_fu_756_p1;
        sh_assign_6_i_cast_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_6_reg_2021),32));

    sh_assign_fu_1388_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast6_fu_1384_p1));
        sh_i_cast_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(Ex_V_fu_750_p2),12));

    sin_basis_fu_860_p2 <= (cos_basis_fu_830_p10 xor ap_const_lv1_1);
    storemerge5_fu_1680_p3 <= 
        ap_const_lv32_0 when (tmp_23_fu_1670_p2(0) = '1') else 
        tmp_25_fu_1675_p2;
    storemerge6_fu_1350_p3 <= 
        ap_const_lv32_46BB8000 when (tmp_35_fu_1345_p2(0) = '1') else 
        reg_441;
    storemerge_fu_1870_p3 <= 
        p_Val2_59_fu_1838_p3 when (tmp_14_reg_2306(0) = '1') else 
        p_Val2_64_fu_1862_p3;
    storemerge_i_i_fu_723_p3 <= 
        tmp_i_i_reg_1981 when (closepath_reg_1917(0) = '1') else 
        ap_const_lv11_0;
    tmp_11_fu_1505_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFA240) + signed(p_Val2_54_fu_1494_p3));
    tmp_12_fu_1511_p2 <= "1" when (signed(p_Val2_54_fu_1494_p3) < signed(ap_const_lv32_1)) else "0";
    tmp_13_fu_1517_p2 <= std_logic_vector(unsigned(ap_const_lv32_5DC0) + unsigned(p_Val2_54_fu_1494_p3));
    tmp_14_fu_1539_p2 <= "1" when (readPos_load_reg_2299 = ap_const_lv32_5DBF) else "0";
    tmp_15_fu_1544_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(readPos_load_reg_2299));
        tmp_16_fu_1549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_1544_p2),64));

    tmp_16_tmp_s_fu_1523_p3 <= 
        tmp_13_fu_1517_p2 when (tmp_12_fu_1511_p2(0) = '1') else 
        p_Val2_54_fu_1494_p3;
        tmp_17_fu_1554_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(readPos_load_reg_2299),64));

    tmp_1_fu_1499_p2 <= "1" when (signed(p_Val2_54_fu_1494_p3) > signed(ap_const_lv32_5DC0)) else "0";
        tmp_22_fu_1666_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(writePos),64));

    tmp_23_fu_1670_p2 <= "1" when (writePos = ap_const_lv32_5DBF) else "0";
    tmp_24_fu_565_p1 <= addr_V_fu_542_p3(7 - 1 downto 0);
    tmp_25_fu_1675_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(writePos));
    tmp_30_fu_1263_p2 <= (or_cond_i_fu_1223_p2 or tmp_44_i_reg_1998);
    tmp_31_fu_1313_p4 <= tmp_to_int_fu_1309_p1(30 downto 23);
    tmp_32_fu_1339_p2 <= (notrhs_fu_1333_p2 or notlhs_fu_1327_p2);
    tmp_34_fu_645_p1 <= p_Val2_65_fu_639_p3(1 - 1 downto 0);
    tmp_34_i_i_i_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_1928),256));
    tmp_35_fu_1345_p2 <= (tmp_32_fu_1339_p2 and tmp_33_reg_2258);
    tmp_36_fu_1463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_1455_p3),31));
    tmp_37_fu_1467_p4 <= tmp_84_i_i_i_fu_1449_p2(54 downto 24);
    tmp_38_fu_1737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_1729_p3),31));
    tmp_39_fu_1741_p4 <= tmp_84_i_i_i1_fu_1723_p2(54 downto 24);
    tmp_40_fu_1801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_61_fu_1793_p3),31));
    tmp_41_fu_1805_p4 <= tmp_84_i_i_i2_fu_1787_p2(54 downto 24);
    tmp_41_i_fu_1210_p3 <= 
        tmp_28_fu_1134_p18 when (cos_basis_reg_2041(0) = '1') else 
        tmp_29_fu_1172_p18;
    tmp_42_i_fu_713_p2 <= "1" when (loc_V_reg_1904 = ap_const_lv11_0) else "0";
    tmp_43_i_fu_608_p2 <= "1" when (loc_V_1_reg_1911 = ap_const_lv52_0) else "0";
    tmp_44_i_fu_718_p2 <= "1" when (loc_V_reg_1904 = ap_const_lv11_7FF) else "0";
    tmp_48_i_i_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1986),124));
    tmp_49_fu_1323_p1 <= tmp_to_int_fu_1309_p1(23 - 1 downto 0);
    tmp_51_i_i_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Mx_zeros_V_reg_1986),11));
    tmp_53_fu_1455_p3 <= tmp_83_i_i_i_fu_1443_p2(24 downto 24);
    tmp_53_i_i_fu_768_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_i_cast_fu_756_p1));
    tmp_54_i_i_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_6_i_cast_fu_782_p1),63));
    tmp_55_i_i_fu_789_p2 <= std_logic_vector(shift_right(unsigned(Mx_V_reg_2004),to_integer(unsigned('0' & tmp_54_i_i_fu_785_p1(31-1 downto 0)))));
    tmp_56_i_i_fu_794_p2 <= std_logic_vector(shift_left(unsigned(Mx_V_reg_2004),to_integer(unsigned('0' & tmp_54_i_i_fu_785_p1(31-1 downto 0)))));
    tmp_57_fu_1729_p3 <= tmp_83_i_i_i1_fu_1717_p2(24 downto 24);
    tmp_61_fu_1793_p3 <= tmp_83_i_i_i2_fu_1781_p2(24 downto 24);
    tmp_64_i_i_fu_873_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_38_fu_866_p3),64));
        tmp_66_i_i_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_40_fu_967_p3),64));

        tmp_67_i_i_fu_1002_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_35_i_i_reg_2145),64));

        tmp_69_i_i_cast_fu_1011_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_i_i_reg_2150),64));

    tmp_71_i_i_cast_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_2190),64));
    tmp_73_i_i_cast_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_reg_2195),64));
    tmp_80_i_i_i1_cast5_fu_1703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_i_i_i1_fu_1694_p4),79));
    tmp_80_i_i_i1_fu_1694_p4 <= ((ap_const_lv1_1 & loc_V_7_reg_2326) & ap_const_lv1_0);
    tmp_80_i_i_i7_cast3_fu_1767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_i_i_i7_fu_1758_p4),79));
    tmp_80_i_i_i7_fu_1758_p4 <= ((ap_const_lv1_1 & loc_V_9_reg_2347) & ap_const_lv1_0);
    tmp_80_i_i_i_cast7_fu_1429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_80_i_i_i_fu_1420_p4),79));
    tmp_80_i_i_i_fu_1420_p4 <= ((ap_const_lv1_1 & loc_V_5_reg_2273) & ap_const_lv1_0);
        tmp_81_i_i_i1_cast_fu_1600_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_81_i_i_i1_fu_1594_p2),9));

    tmp_81_i_i_i1_fu_1594_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_6_fu_1562_p4));
        tmp_81_i_i_i2_cast_fu_1654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_81_i_i_i2_fu_1648_p2),9));

    tmp_81_i_i_i2_fu_1648_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_8_fu_1616_p4));
        tmp_81_i_i_i_cast_fu_1408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_81_i_i_i_fu_1402_p2),9));

    tmp_81_i_i_i_fu_1402_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_4_fu_1370_p4));
    tmp_82_i_i_i1_fu_1713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_3_cast_fu_1707_p1),79));
    tmp_82_i_i_i2_fu_1777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_5_cast_fu_1771_p1),79));
    tmp_82_i_i_i_fu_1439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_cast_fu_1433_p1),79));
    tmp_83_i_i_i1_fu_1717_p2 <= std_logic_vector(shift_right(unsigned(tmp_80_i_i_i1_fu_1694_p4),to_integer(unsigned('0' & sh_assign_3_cast_cas_fu_1710_p1(25-1 downto 0)))));
    tmp_83_i_i_i2_fu_1781_p2 <= std_logic_vector(shift_right(unsigned(tmp_80_i_i_i7_fu_1758_p4),to_integer(unsigned('0' & sh_assign_5_cast_cas_fu_1774_p1(25-1 downto 0)))));
    tmp_83_i_i_i_fu_1443_p2 <= std_logic_vector(shift_right(unsigned(tmp_80_i_i_i_fu_1420_p4),to_integer(unsigned('0' & sh_assign_1_cast_cas_fu_1436_p1(25-1 downto 0)))));
    tmp_84_i_i_i1_fu_1723_p2 <= std_logic_vector(shift_left(unsigned(tmp_80_i_i_i1_cast5_fu_1703_p1),to_integer(unsigned('0' & tmp_82_i_i_i1_fu_1713_p1(31-1 downto 0)))));
    tmp_84_i_i_i2_fu_1787_p2 <= std_logic_vector(shift_left(unsigned(tmp_80_i_i_i7_cast3_fu_1767_p1),to_integer(unsigned('0' & tmp_82_i_i_i2_fu_1777_p1(31-1 downto 0)))));
    tmp_84_i_i_i_fu_1449_p2 <= std_logic_vector(shift_left(unsigned(tmp_80_i_i_i_cast7_fu_1429_p1),to_integer(unsigned('0' & tmp_82_i_i_i_fu_1439_p1(31-1 downto 0)))));
    tmp_86_i_i_i1_fu_1829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_57_reg_2363),32));
    tmp_86_i_i_i2_fu_1853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_62_reg_2368),32));
    tmp_86_i_i_i_fu_1484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_52_fu_1477_p3),32));
    tmp_89_i_i_i1_fu_1832_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_86_i_i_i1_fu_1829_p1));
    tmp_89_i_i_i2_fu_1856_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_86_i_i_i2_fu_1853_p1));
    tmp_89_i_i_i_fu_1488_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_86_i_i_i_fu_1484_p1));
    tmp_i2_i_i_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_i_i_i_fu_550_p4),64));
    
    tmp_i4_i_i_fu_701_p3_proc : process(p_Result_37_fu_693_p3)
    begin
        tmp_i4_i_i_fu_701_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if p_Result_37_fu_693_p3(i) = '1' then
                tmp_i4_i_i_fu_701_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    tmp_i_i_fu_671_p2 <= std_logic_vector(signed(ap_const_lv11_403) + signed(loc_V_reg_1904));
    tmp_i_i_i_i1_cast4_fu_1576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_6_fu_1562_p4),9));
    tmp_i_i_i_i8_cast2_fu_1630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_8_fu_1616_p4),9));
    tmp_i_i_i_i_cast6_fu_1384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_4_fu_1370_p4),9));
    tmp_to_int_fu_1309_p1 <= reg_441;
    x_assign_fu_498_p3 <= 
        grp_fu_415_p1 when (Initialized_load_reg_1882(0) = '1') else 
        ap_const_lv64_3F49BC65C0000000;
end behav;
