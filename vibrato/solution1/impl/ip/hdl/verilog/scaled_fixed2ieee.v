// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module scaled_fixed2ieee (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V,
        prescale,
        ap_return
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;
parameter    ap_const_lv32_0 = 32'd0;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [62:0] in_V;
input  [11:0] prescale;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] i_1_fu_274_p2;
reg   [1:0] i_1_reg_797;
wire    ap_CS_fsm_state2;
wire   [5:0] Hi_assign_fu_288_p2;
reg   [5:0] Hi_assign_reg_802;
wire   [0:0] exitcond1_fu_268_p2;
wire   [5:0] Lo_assign_fu_294_p2;
reg   [5:0] Lo_assign_reg_808;
wire   [0:0] tmp_65_fu_300_p2;
reg   [0:0] tmp_65_reg_815;
wire   [5:0] tmp_68_fu_306_p2;
reg   [5:0] tmp_68_reg_822;
wire   [31:0] p_Result_46_fu_323_p5;
reg   [31:0] p_Result_46_reg_827;
wire   [15:0] tmp_79_fu_402_p1;
reg   [15:0] tmp_79_reg_832;
wire    ap_CS_fsm_state3;
wire   [31:0] out_bits_2_V_1_fu_461_p3;
wire    ap_CS_fsm_state4;
wire   [31:0] out_bits_2_V_6_fu_477_p3;
wire   [31:0] out_bits_2_V_8_fu_485_p3;
wire   [2:0] i_2_fu_499_p2;
wire    ap_CS_fsm_state5;
wire   [31:0] c_3_fu_572_p3;
wire   [0:0] exitcond_fu_493_p2;
wire   [31:0] c_3_3_fu_588_p3;
wire   [31:0] c_3_5_fu_596_p3;
wire   [31:0] c_3_6_fu_612_p3;
wire   [0:0] tmp_81_fu_620_p3;
reg   [0:0] tmp_81_reg_880;
wire    ap_CS_fsm_state6;
wire   [2:0] i_3_fu_628_p2;
reg   [2:0] i_3_reg_884;
wire   [31:0] sh_assign_fu_638_p6;
reg   [31:0] sh_assign_reg_889;
reg   [0:0] isNeg_reg_896;
wire   [31:0] tmp_30_fu_660_p2;
reg   [31:0] tmp_30_reg_902;
wire   [31:0] shift_2_fu_666_p2;
wire    ap_CS_fsm_state7;
wire   [62:0] in_shift_V_fu_692_p3;
wire   [11:0] tmp_35_fu_704_p2;
reg   [11:0] tmp_35_reg_922;
wire   [0:0] tmp_34_fu_699_p2;
wire   [0:0] tmp_37_fu_709_p2;
reg   [0:0] tmp_37_reg_927;
reg   [31:0] out_bits_2_V_s_reg_108;
reg   [31:0] out_bits_1_V_s_reg_120;
reg   [31:0] out_bits_2_V_7_reg_132;
reg   [1:0] i_reg_144;
reg   [31:0] c_2_s_reg_156;
reg   [31:0] c_3_1_reg_168;
reg   [31:0] c_3_4_reg_180;
reg   [31:0] c_3_s_reg_192;
reg   [2:0] i1_reg_204;
reg   [62:0] in_shift_reg_215;
reg   [31:0] shift_reg_225;
reg   [2:0] i2_reg_237;
reg   [62:0] p_Val2_s_reg_248;
reg   [31:0] shift_1_reg_258;
wire   [5:0] tmp_s_fu_280_p3;
wire   [14:0] tmp_64_fu_312_p1;
wire   [15:0] tmp_fu_315_p3;
wire   [5:0] tmp_67_fu_344_p2;
wire   [5:0] tmp_69_fu_348_p2;
reg   [62:0] tmp_66_fu_335_p4;
wire   [5:0] tmp_70_fu_352_p3;
wire   [5:0] tmp_72_fu_365_p3;
wire   [5:0] tmp_73_fu_370_p2;
wire   [62:0] tmp_71_fu_359_p3;
wire   [62:0] tmp_74_fu_376_p1;
wire   [62:0] tmp_75_fu_380_p1;
wire   [62:0] tmp_76_fu_384_p2;
wire   [62:0] tmp_77_fu_390_p2;
wire   [62:0] p_Result_s_fu_396_p2;
wire   [0:0] sel_tmp_fu_406_p2;
wire   [0:0] sel_tmp9_fu_420_p2;
wire   [31:0] out_bits_2_V_fu_412_p3;
wire   [31:0] out_bits_2_V_9_fu_426_p3;
wire   [16:0] tmp_28_fu_434_p3;
wire   [31:0] p_Result_45_fu_441_p5;
wire   [31:0] out_bits_2_V_4_fu_453_p3;
wire   [31:0] out_bits_2_V_5_fu_469_p3;
wire   [1:0] tmp_80_fu_505_p1;
wire   [31:0] p_Val2_67_fu_509_p6;
reg   [31:0] p_Result_47_fu_522_p4;
wire   [0:0] sel_tmp5_fu_552_p2;
wire   [0:0] sel_tmp4_fu_546_p2;
wire   [0:0] sel_tmp3_fu_540_p2;
reg   [31:0] c_3_8_fu_532_p3;
wire   [0:0] or_cond_fu_558_p2;
wire   [31:0] newSel_fu_564_p3;
wire   [31:0] c_3_2_fu_580_p3;
wire   [31:0] newSel2_fu_604_p3;
wire   [1:0] sh_assign_fu_638_p5;
wire   [31:0] sh_assign_1_fu_671_p3;
wire   [62:0] tmp_31_fu_676_p1;
wire   [62:0] tmp_33_fu_686_p2;
wire   [62:0] tmp_32_fu_680_p2;
wire    ap_CS_fsm_state8;
wire  signed [31:0] tmp_37_cast_fu_714_p1;
wire   [31:0] newexp_fu_717_p2;
wire   [0:0] tmp_84_fu_723_p3;
wire   [0:0] or_cond_43_fu_731_p2;
wire   [51:0] phitmp2_fu_740_p4;
wire   [10:0] tmp_85_fu_736_p1;
wire   [10:0] out_exp_V_fu_758_p3;
wire   [51:0] p_Val2_68_fu_750_p3;
wire   [63:0] p_Result_48_fu_766_p4;
wire   [63:0] result_write_assign_fu_776_p1;
reg   [63:0] ap_return_preg;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_return_preg = 64'd0;
end

vibrato_mux_42_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
vibrato_mux_42_32_1_U1(
    .din1(out_bits_2_V_7_reg_132),
    .din2(out_bits_1_V_s_reg_120),
    .din3(out_bits_2_V_s_reg_108),
    .din4(p_Result_46_reg_827),
    .din5(tmp_80_fu_505_p1),
    .dout(p_Val2_67_fu_509_p6)
);

vibrato_mux_42_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
vibrato_mux_42_32_1_U2(
    .din1(c_3_4_reg_180),
    .din2(c_3_1_reg_168),
    .din3(c_2_s_reg_156),
    .din4(c_3_s_reg_192),
    .din5(sh_assign_fu_638_p5),
    .dout(sh_assign_fu_638_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                ap_return_preg[0] <= 1'b0;
        ap_return_preg[1] <= 1'b0;
        ap_return_preg[2] <= 1'b0;
        ap_return_preg[3] <= 1'b0;
        ap_return_preg[4] <= 1'b0;
        ap_return_preg[5] <= 1'b0;
        ap_return_preg[6] <= 1'b0;
        ap_return_preg[7] <= 1'b0;
        ap_return_preg[8] <= 1'b0;
        ap_return_preg[9] <= 1'b0;
        ap_return_preg[10] <= 1'b0;
        ap_return_preg[11] <= 1'b0;
        ap_return_preg[12] <= 1'b0;
        ap_return_preg[13] <= 1'b0;
        ap_return_preg[14] <= 1'b0;
        ap_return_preg[15] <= 1'b0;
        ap_return_preg[16] <= 1'b0;
        ap_return_preg[17] <= 1'b0;
        ap_return_preg[18] <= 1'b0;
        ap_return_preg[19] <= 1'b0;
        ap_return_preg[20] <= 1'b0;
        ap_return_preg[21] <= 1'b0;
        ap_return_preg[22] <= 1'b0;
        ap_return_preg[23] <= 1'b0;
        ap_return_preg[24] <= 1'b0;
        ap_return_preg[25] <= 1'b0;
        ap_return_preg[26] <= 1'b0;
        ap_return_preg[27] <= 1'b0;
        ap_return_preg[28] <= 1'b0;
        ap_return_preg[29] <= 1'b0;
        ap_return_preg[30] <= 1'b0;
        ap_return_preg[31] <= 1'b0;
        ap_return_preg[32] <= 1'b0;
        ap_return_preg[33] <= 1'b0;
        ap_return_preg[34] <= 1'b0;
        ap_return_preg[35] <= 1'b0;
        ap_return_preg[36] <= 1'b0;
        ap_return_preg[37] <= 1'b0;
        ap_return_preg[38] <= 1'b0;
        ap_return_preg[39] <= 1'b0;
        ap_return_preg[40] <= 1'b0;
        ap_return_preg[41] <= 1'b0;
        ap_return_preg[42] <= 1'b0;
        ap_return_preg[43] <= 1'b0;
        ap_return_preg[44] <= 1'b0;
        ap_return_preg[45] <= 1'b0;
        ap_return_preg[46] <= 1'b0;
        ap_return_preg[47] <= 1'b0;
        ap_return_preg[48] <= 1'b0;
        ap_return_preg[49] <= 1'b0;
        ap_return_preg[50] <= 1'b0;
        ap_return_preg[51] <= 1'b0;
        ap_return_preg[52] <= 1'b0;
        ap_return_preg[53] <= 1'b0;
        ap_return_preg[54] <= 1'b0;
        ap_return_preg[55] <= 1'b0;
        ap_return_preg[56] <= 1'b0;
        ap_return_preg[57] <= 1'b0;
        ap_return_preg[58] <= 1'b0;
        ap_return_preg[59] <= 1'b0;
        ap_return_preg[60] <= 1'b0;
        ap_return_preg[61] <= 1'b0;
        ap_return_preg[62] <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
                        ap_return_preg[62 : 0] <= result_write_assign_fu_776_p1[62 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond_fu_493_p2))) begin
        i1_reg_204 <= i_2_fu_499_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_268_p2 == 1'd1))) begin
        i1_reg_204 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_493_p2))) begin
        i2_reg_237 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_81_reg_880) & (1'd1 == tmp_34_fu_699_p2))) begin
        i2_reg_237 <= i_3_reg_884;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_144 <= i_1_reg_797;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_144 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_493_p2))) begin
        in_shift_reg_215 <= in_V;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_81_reg_880) & (1'd1 == tmp_34_fu_699_p2))) begin
        in_shift_reg_215 <= in_shift_V_fu_692_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_81_reg_880) & (1'd0 == tmp_34_fu_699_p2))) begin
        p_Val2_s_reg_248 <= in_shift_V_fu_692_p3;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_81_fu_620_p3))) begin
        p_Val2_s_reg_248 <= in_shift_reg_215;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_81_reg_880) & (1'd0 == tmp_34_fu_699_p2))) begin
        shift_1_reg_258 <= shift_2_fu_666_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == tmp_81_fu_620_p3))) begin
        shift_1_reg_258 <= shift_reg_225;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_493_p2))) begin
        shift_reg_225 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_81_reg_880) & (1'd1 == tmp_34_fu_699_p2))) begin
        shift_reg_225 <= shift_2_fu_666_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_268_p2 == 1'd0))) begin
        Hi_assign_reg_802[5 : 4] <= Hi_assign_fu_288_p2[5 : 4];
        Lo_assign_reg_808[5 : 4] <= Lo_assign_fu_294_p2[5 : 4];
        tmp_65_reg_815 <= tmp_65_fu_300_p2;
        tmp_68_reg_822[5 : 4] <= tmp_68_fu_306_p2[5 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond_fu_493_p2))) begin
        c_2_s_reg_156 <= c_3_fu_572_p3;
        c_3_1_reg_168 <= c_3_3_fu_588_p3;
        c_3_4_reg_180 <= c_3_5_fu_596_p3;
        c_3_s_reg_192 <= c_3_6_fu_612_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_797 <= i_1_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_3_reg_884 <= i_3_fu_628_p2;
        tmp_81_reg_880 <= i2_reg_237[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_81_fu_620_p3))) begin
        isNeg_reg_896 <= sh_assign_fu_638_p6[32'd31];
        sh_assign_reg_889 <= sh_assign_fu_638_p6;
        tmp_30_reg_902 <= tmp_30_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_bits_1_V_s_reg_120 <= out_bits_2_V_6_fu_477_p3;
        out_bits_2_V_7_reg_132 <= out_bits_2_V_8_fu_485_p3;
        out_bits_2_V_s_reg_108 <= out_bits_2_V_1_fu_461_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_268_p2 == 1'd1))) begin
        p_Result_46_reg_827 <= p_Result_46_fu_323_p5;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ((1'd1 == tmp_81_reg_880) | (1'd0 == tmp_34_fu_699_p2)))) begin
        tmp_35_reg_922 <= tmp_35_fu_704_p2;
        tmp_37_reg_927 <= tmp_37_fu_709_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_79_reg_832 <= tmp_79_fu_402_p1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_return = result_write_assign_fu_776_p1;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_268_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_493_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & ((1'd1 == tmp_81_reg_880) | (1'd0 == tmp_34_fu_699_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_assign_fu_288_p2 = ($signed(6'd62) - $signed(tmp_s_fu_280_p3));

assign Lo_assign_fu_294_p2 = ($signed(6'd47) - $signed(tmp_s_fu_280_p3));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign c_3_2_fu_580_p3 = ((sel_tmp4_fu_546_p2[0:0] === 1'b1) ? c_3_8_fu_532_p3 : c_3_1_reg_168);

assign c_3_3_fu_588_p3 = ((sel_tmp5_fu_552_p2[0:0] === 1'b1) ? c_3_1_reg_168 : c_3_2_fu_580_p3);

assign c_3_5_fu_596_p3 = ((sel_tmp5_fu_552_p2[0:0] === 1'b1) ? c_3_8_fu_532_p3 : c_3_4_reg_180);

assign c_3_6_fu_612_p3 = ((or_cond_fu_558_p2[0:0] === 1'b1) ? c_3_s_reg_192 : newSel2_fu_604_p3);


always @ (p_Result_47_fu_522_p4) begin
    if (p_Result_47_fu_522_p4[0] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd0;
    end else if (p_Result_47_fu_522_p4[1] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd1;
    end else if (p_Result_47_fu_522_p4[2] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd2;
    end else if (p_Result_47_fu_522_p4[3] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd3;
    end else if (p_Result_47_fu_522_p4[4] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd4;
    end else if (p_Result_47_fu_522_p4[5] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd5;
    end else if (p_Result_47_fu_522_p4[6] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd6;
    end else if (p_Result_47_fu_522_p4[7] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd7;
    end else if (p_Result_47_fu_522_p4[8] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd8;
    end else if (p_Result_47_fu_522_p4[9] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd9;
    end else if (p_Result_47_fu_522_p4[10] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd10;
    end else if (p_Result_47_fu_522_p4[11] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd11;
    end else if (p_Result_47_fu_522_p4[12] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd12;
    end else if (p_Result_47_fu_522_p4[13] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd13;
    end else if (p_Result_47_fu_522_p4[14] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd14;
    end else if (p_Result_47_fu_522_p4[15] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd15;
    end else if (p_Result_47_fu_522_p4[16] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd16;
    end else if (p_Result_47_fu_522_p4[17] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd17;
    end else if (p_Result_47_fu_522_p4[18] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd18;
    end else if (p_Result_47_fu_522_p4[19] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd19;
    end else if (p_Result_47_fu_522_p4[20] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd20;
    end else if (p_Result_47_fu_522_p4[21] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd21;
    end else if (p_Result_47_fu_522_p4[22] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd22;
    end else if (p_Result_47_fu_522_p4[23] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd23;
    end else if (p_Result_47_fu_522_p4[24] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd24;
    end else if (p_Result_47_fu_522_p4[25] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd25;
    end else if (p_Result_47_fu_522_p4[26] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd26;
    end else if (p_Result_47_fu_522_p4[27] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd27;
    end else if (p_Result_47_fu_522_p4[28] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd28;
    end else if (p_Result_47_fu_522_p4[29] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd29;
    end else if (p_Result_47_fu_522_p4[30] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd30;
    end else if (p_Result_47_fu_522_p4[31] == 1'b1) begin
        c_3_8_fu_532_p3 = 32'd31;
    end else begin
        c_3_8_fu_532_p3 = 32'd32;
    end
end

assign c_3_fu_572_p3 = ((or_cond_fu_558_p2[0:0] === 1'b1) ? c_2_s_reg_156 : newSel_fu_564_p3);

assign exitcond1_fu_268_p2 = ((i_reg_144 == 2'd3) ? 1'b1 : 1'b0);

assign exitcond_fu_493_p2 = ((i1_reg_204 == 3'd4) ? 1'b1 : 1'b0);

assign i_1_fu_274_p2 = (i_reg_144 + 2'd1);

assign i_2_fu_499_p2 = (i1_reg_204 + 3'd1);

assign i_3_fu_628_p2 = (i2_reg_237 + 3'd1);

assign in_shift_V_fu_692_p3 = ((isNeg_reg_896[0:0] === 1'b1) ? tmp_33_fu_686_p2 : tmp_32_fu_680_p2);

assign newSel2_fu_604_p3 = ((sel_tmp3_fu_540_p2[0:0] === 1'b1) ? c_3_s_reg_192 : c_3_8_fu_532_p3);

assign newSel_fu_564_p3 = ((sel_tmp3_fu_540_p2[0:0] === 1'b1) ? c_3_8_fu_532_p3 : c_2_s_reg_156);

assign newexp_fu_717_p2 = ($signed(tmp_37_cast_fu_714_p1) - $signed(shift_1_reg_258));

assign or_cond_43_fu_731_p2 = (tmp_84_fu_723_p3 | tmp_37_reg_927);

assign or_cond_fu_558_p2 = (sel_tmp5_fu_552_p2 | sel_tmp4_fu_546_p2);

assign out_bits_2_V_1_fu_461_p3 = ((sel_tmp_fu_406_p2[0:0] === 1'b1) ? out_bits_2_V_s_reg_108 : out_bits_2_V_4_fu_453_p3);

assign out_bits_2_V_4_fu_453_p3 = ((sel_tmp9_fu_420_p2[0:0] === 1'b1) ? out_bits_2_V_s_reg_108 : p_Result_45_fu_441_p5);

assign out_bits_2_V_5_fu_469_p3 = ((sel_tmp9_fu_420_p2[0:0] === 1'b1) ? p_Result_45_fu_441_p5 : out_bits_1_V_s_reg_120);

assign out_bits_2_V_6_fu_477_p3 = ((sel_tmp_fu_406_p2[0:0] === 1'b1) ? out_bits_1_V_s_reg_120 : out_bits_2_V_5_fu_469_p3);

assign out_bits_2_V_8_fu_485_p3 = ((sel_tmp_fu_406_p2[0:0] === 1'b1) ? p_Result_45_fu_441_p5 : out_bits_2_V_7_reg_132);

assign out_bits_2_V_9_fu_426_p3 = ((sel_tmp9_fu_420_p2[0:0] === 1'b1) ? out_bits_1_V_s_reg_120 : out_bits_2_V_fu_412_p3);

assign out_bits_2_V_fu_412_p3 = ((sel_tmp_fu_406_p2[0:0] === 1'b1) ? out_bits_2_V_7_reg_132 : out_bits_2_V_s_reg_108);

assign out_exp_V_fu_758_p3 = ((or_cond_43_fu_731_p2[0:0] === 1'b1) ? 11'd0 : tmp_85_fu_736_p1);

assign p_Result_45_fu_441_p5 = {{tmp_28_fu_434_p3}, {out_bits_2_V_9_fu_426_p3[14:0]}};

assign p_Result_46_fu_323_p5 = {{tmp_fu_315_p3}, {ap_const_lv32_0[15:0]}};

integer ap_tvar_int_0;

always @ (p_Val2_67_fu_509_p6) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_47_fu_522_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_47_fu_522_p4[ap_tvar_int_0] = p_Val2_67_fu_509_p6[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_48_fu_766_p4 = {{{{1'd0}, {out_exp_V_fu_758_p3}}}, {p_Val2_68_fu_750_p3}};

assign p_Result_s_fu_396_p2 = (tmp_76_fu_384_p2 & tmp_77_fu_390_p2);

assign p_Val2_68_fu_750_p3 = ((or_cond_43_fu_731_p2[0:0] === 1'b1) ? 52'd0 : phitmp2_fu_740_p4);

assign phitmp2_fu_740_p4 = {{p_Val2_s_reg_248[61:10]}};

assign result_write_assign_fu_776_p1 = p_Result_48_fu_766_p4;

assign sel_tmp3_fu_540_p2 = ((tmp_80_fu_505_p1 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_546_p2 = ((tmp_80_fu_505_p1 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp5_fu_552_p2 = ((tmp_80_fu_505_p1 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp9_fu_420_p2 = ((i_reg_144 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp_fu_406_p2 = ((i_reg_144 == 2'd0) ? 1'b1 : 1'b0);

assign sh_assign_1_fu_671_p3 = ((isNeg_reg_896[0:0] === 1'b1) ? tmp_30_reg_902 : sh_assign_reg_889);

assign sh_assign_fu_638_p5 = i2_reg_237[1:0];

assign shift_2_fu_666_p2 = (sh_assign_reg_889 + shift_reg_225);

assign tmp_28_fu_434_p3 = {{tmp_79_reg_832}, {1'd1}};

assign tmp_30_fu_660_p2 = (32'd0 - sh_assign_fu_638_p6);

assign tmp_31_fu_676_p1 = sh_assign_1_fu_671_p3;

assign tmp_32_fu_680_p2 = in_shift_reg_215 << tmp_31_fu_676_p1;

assign tmp_33_fu_686_p2 = $signed(in_shift_reg_215) >>> tmp_31_fu_676_p1;

assign tmp_34_fu_699_p2 = ((sh_assign_reg_889 == 32'd16) ? 1'b1 : 1'b0);

assign tmp_35_fu_704_p2 = (12'd1023 - prescale);

assign tmp_37_cast_fu_714_p1 = $signed(tmp_35_reg_922);

assign tmp_37_fu_709_p2 = ((in_V == 63'd0) ? 1'b1 : 1'b0);

assign tmp_64_fu_312_p1 = in_V[14:0];

assign tmp_65_fu_300_p2 = ((Lo_assign_fu_294_p2 > Hi_assign_fu_288_p2) ? 1'b1 : 1'b0);

integer ap_tvar_int_1;

always @ (in_V) begin
    for (ap_tvar_int_1 = 63 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 62 - 0) begin
            tmp_66_fu_335_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_66_fu_335_p4[ap_tvar_int_1] = in_V[62 - ap_tvar_int_1];
        end
    end
end

assign tmp_67_fu_344_p2 = (Lo_assign_reg_808 - Hi_assign_reg_802);

assign tmp_68_fu_306_p2 = ($signed(6'd62) - $signed(Lo_assign_fu_294_p2));

assign tmp_69_fu_348_p2 = (Hi_assign_reg_802 - Lo_assign_reg_808);

assign tmp_70_fu_352_p3 = ((tmp_65_reg_815[0:0] === 1'b1) ? tmp_67_fu_344_p2 : tmp_69_fu_348_p2);

assign tmp_71_fu_359_p3 = ((tmp_65_reg_815[0:0] === 1'b1) ? tmp_66_fu_335_p4 : in_V);

assign tmp_72_fu_365_p3 = ((tmp_65_reg_815[0:0] === 1'b1) ? tmp_68_reg_822 : Lo_assign_reg_808);

assign tmp_73_fu_370_p2 = ($signed(6'd62) - $signed(tmp_70_fu_352_p3));

assign tmp_74_fu_376_p1 = tmp_72_fu_365_p3;

assign tmp_75_fu_380_p1 = tmp_73_fu_370_p2;

assign tmp_76_fu_384_p2 = tmp_71_fu_359_p3 >> tmp_74_fu_376_p1;

assign tmp_77_fu_390_p2 = 63'd9223372036854775807 >> tmp_75_fu_380_p1;

assign tmp_79_fu_402_p1 = p_Result_s_fu_396_p2[15:0];

assign tmp_80_fu_505_p1 = i1_reg_204[1:0];

assign tmp_81_fu_620_p3 = i2_reg_237[32'd2];

assign tmp_84_fu_723_p3 = newexp_fu_717_p2[32'd31];

assign tmp_85_fu_736_p1 = newexp_fu_717_p2[10:0];

assign tmp_fu_315_p3 = {{tmp_64_fu_312_p1}, {1'd1}};

assign tmp_s_fu_280_p3 = {{i_reg_144}, {4'd0}};

always @ (posedge ap_clk) begin
    Hi_assign_reg_802[3:0] <= 4'b1110;
    Lo_assign_reg_808[3:0] <= 4'b1111;
    tmp_68_reg_822[3:0] <= 4'b1111;
    ap_return_preg[63] <= 1'b0;
end

endmodule //scaled_fixed2ieee
